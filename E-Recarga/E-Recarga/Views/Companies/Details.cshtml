@model E_Recarga.ViewModels.CompanyViewModel
@using E_Recarga.Models

@{
    ViewBag.Title = "Detalhes " + Model.Company.Name;
}


<center>
    <br /><h1>@Html.DisplayFor(model => model.Company.Name)</h1><br />
</center>


<div>
    <hr />
    <dl class="dl-horizontal" size="+1.5">
        <dt>
            @Html.DisplayNameFor(model => model.Company.PhoneNumber)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Company.PhoneNumber)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Company.Email)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Company.Email)
        </dd>
    </dl>

    <div class="text-right">
        @if (Request.IsAuthenticated && User.IsInRole(nameof(RoleEnum.CompanyManager)))
        {
            @Html.ActionLink("Editar", "Edit", new { id = Model.Company.Id })
        }
        else
        {
            @Html.ActionLink("Editar", "Edit", new { id = Model.Company.Id })
        }
    </div>
    <hr />
</div>

@if (Request.IsAuthenticated && User.IsInRole(nameof(RoleEnum.CompanyManager)))
{
    <br />
    <h3>Estações</h3>
    <div class="text-right">
        @Html.ActionLink("Criar", "Create", "Stations", new { companyId = Model.Company.Id }, null)<br /><br />
    </div>
    if (Model.Company.Stations.Count == 0)
    {
        <p>Não existem estações atribuídas à empresa.</p>
        <br /><br />
    }
    else
    {
        @(Html
            .Grid(Model.Company.Stations)
            .Build(columns =>
            {
                columns.Add(model => model.Company.Name).Titled("Nome da Companhia");
                columns.Add(model => model.ComercialName);
                columns.Add(model => model.StreetName);
                columns.Add(model => model.BuildingNumber);
                columns.Add(model => model.Parish);
                columns.Add(model => model.Region);
                if (User.IsInRole(nameof(RoleEnum.CompanyManager)))
                    columns.Add(model => @Html.Raw(
                        Html.ActionLink("Detalhes", "Details","Stations", new { id = model.Id },null).ToString()) + " | " +
                        Html.ActionLink("Editar", "Edit", "Stations", new { id = model.Id }, null).ToString() + " | " +
                        Html.ActionLink("Apagar", "Delete", "Stations", new { id = model.Id }, null).ToString())
                        .Titled("Ações").Encoded(false);
            })
                .Empty("Não existem dados")
                .Named("first")
                .Filterable()
                .Sortable()
                .Pageable(pager =>
                {
                    pager.PageSizes = new Dictionary<Int32, String> { { 0, "All" }, { 5, "5" }, { 10, "10" }, { 20, "20" } };
                    pager.ShowPageSizes = true;
                    pager.PagesToDisplay = 3;
                    pager.RowsPerPage = 5;
                })
        )
        <hr /><br />
    }
}

<div>
    <h3>Funcionários</h3>
    @if (Request.IsAuthenticated && (User.IsInRole(nameof(RoleEnum.CompanyManager)) || User.IsInRole(nameof(RoleEnum.Administrator))))
    {
        <div class="text-right">
            @Html.ActionLink("Criar", "Create", "Employees", new { companyId = Model.Company.Id }, null)<br /><br />
        </div>
    }

    @if (Model.Company.Employees.Count == 0)
    {
        <p>Não existem trabalhadores atribuídos à empresa.</p>
    }
    else
    {
        var data = User.IsInRole(nameof(RoleEnum.Administrator)) ? Model.Managers : Model.EmployeeRoleDictionary.Keys.ToList();
        @(Html
            .Grid(data.AsQueryable())
            .Build(columns =>
            {
                columns.Add(model => model.Name);
                columns.Add(model => model.Email).Titled("Email");
                columns.Add(model => model.PhoneNumber).Titled("Telefone");
                columns.Add(model => model.Station.ComercialName).Titled("Estação");

                if (User.IsInRole(nameof(RoleEnum.CompanyManager)))
                {
                    columns.Add(model => Model.EmployeeRoleDictionary[model]).Titled("Função");
                    columns.Add(model => @Html.Raw(
                    Html.ActionLink("Detalhes", "Details", "Employees", new { id = model.Id }, null).ToString()) + " | " +
                    Html.ActionLink("Editar", "Edit", "Employees", new { id = model.Id }, null).ToString() + " | " +
                    Html.ActionLink("Apagar", "Delete", "Employees", new { id = model.Id }, null).ToString())
                    .Titled("Ações").Encoded(false);
                }
                else
                {
                    columns.Add(model => "Gestor").Titled("Função");
                }

            })
            .Empty("Não existem dados")
            .Named("second")
            .Filterable()
            .Sortable()
            .Pageable(pager =>
            {
                pager.PageSizes = new Dictionary<Int32, String> { { 0, "All" }, { 5, "5" }, { 10, "10" }, { 20, "20" } };
                pager.ShowPageSizes = true;
                pager.PagesToDisplay = 3;
                pager.RowsPerPage = 5;
            })
        )
        <hr /><br /><br />
    }
    
    @if (Request.IsAuthenticated && User.IsInRole(nameof(RoleEnum.Administrator)))
    {
        @Html.ActionLink("Voltar", "Index")
    }
</div>

