@model E_Recarga.Models.ERecargaModels.Appointment
@using E_Recarga.Models

@{
    ViewBag.Title = "Agendar";
}

<h2>Agendar</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Appointment</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Company.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Company.Name, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Company.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (User.IsInRole(nameof(RoleEnum.Employee)) && Model.StationId != null)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Station.ComercialName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Station.ComercialName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Station.ComercialName, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                @Html.LabelFor(model => model.StationId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("StationId", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.StationId, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        <div class="form-group">
            @Html.LabelFor(model => model.UserId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("UserId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cost, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Start, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Start, new { @id = "startTime", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Start, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.End, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.End, new { @id = "endTime", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.End, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">

        var today = new Date();
        var _maxDate = today.getDate() + 7;

        $(function (e) {
            $('#startTime').datetimepicker({
                locale: 'pt',
                minDate: today,
                showClose: true,
                showClear: true,
                toolbarPlacement: 'top',
                stepping: 15
            });

            $('#endTime').datetimepicker({
                useCurrent: false, //Important! See issue #1075
                locale: 'pt',
                minDate: today,
                showClose: true,
                showClear: true,
                toolbarPlacement: 'top',
                stepping: 30
            });


            $("#startTime").on("dp.change", function (e) {
                $('#endTime').data("DateTimePicker").minDate(e.date);
                //Adds 5 hours, this is ridiculous
                $('#endTime').data("DateTimePicker").maxDate(new Date(e.date + (5 * 60 * 60 * 1000)));
            });

            $("#endTime").on("dp.change", function (e) {
                $('#startTime').data("DateTimePicker").maxDate(e.date);
            });

            $("#startTime").attr("autocomplete", "off");
            $("#endTime").attr("autocomplete", "off");
        });
    </script>

}
