@model IQueryable<E_Recarga.Models.ERecargaModels.Appointment>
@using E_Recarga.Models

@{
    ViewBag.Title = "Index";
}

<center>
    <br />
    <h3>Marcações</h3>
    <br />
</center>

<div class="row" align="right" width="100px">
    <div class="col col-md-9" align="left">@Html.ActionLink("Criar Marcação", "Create")</div>
    <div class="col col-md-2" style="height:32px"><label class="col-form-label" style="font-size:18px">Ver tudo</label></div>
    <div class="col col-md-1">
        <label class="switch" >
            <input type="checkbox" id="slider">
            <span class="slider round"></span>
        </label>
    </div>
    
</div>

<br />
@(Html
            .Grid(Model)
            .Build(columns =>
            {
                columns.Add(model => model.Company.Name.Trim()).Titled("Empresa");
                columns.Add(model => model.Station.ComercialName.Trim()).Titled("Estação");
                columns.Add(model => model.Pod.Identifier.ToString()).Titled("Posto");
                columns.Add(model => model.User.Name.Trim()).Titled("Utilizador");
                columns.Add(model => model.Cost.ToString()).Titled("Custo");
                columns.Add(model => model.Start).Titled("Início");
                columns.Add(model => model.End).Titled("Fim");
                columns.Add(model => Enum_Dictionnary.Translator[model.Status.Name]).Titled("Estado");

                if (User.IsInRole(nameof(RoleEnum.CompanyManager)))
                    columns.Add(model => @Html.ActionLink("Detalhes", "Details", new { id = model.Id })).Titled("Ação");

                else if (User.IsInRole(nameof(RoleEnum.Employee)))
                    columns.Add(model => @Html.Raw(Html.ActionLink("Detalhes", "Details", new { id = model.Id }).ToString() + " | " + Html.ActionLink("Editar", "Edit", new { id = model.Id }).ToString())).Titled("Ações").Encoded(false);
            })
            .RowAttributed(model =>
            {
                if (model.AppointmentStatusId == AppointmentStatusEnum.Pending)
                {
                    if (DateTime.Now > model.Start && DateTime.Now < model.End)
                    {
                        return new { @class = "color_td2" };
                    }
                    else if (DateTime.Now > model.End)
                    {
                        return new { @class = "bg-danger" };
                    }

                    return new { };
                }
                else if (model.AppointmentStatusId == AppointmentStatusEnum.Ongoing)
                {
                    if (DateTime.Now.AddMinutes(5) > model.End)
                    {
                        return new { @class = "color_td1" };
                    }

                    return new { @class = "bg-info" };
                }
                else if (model.AppointmentStatusId == AppointmentStatusEnum.Cancelled)
                {
                    return new { @class = "bg-danger" };
                }
                else if (model.AppointmentStatusId == AppointmentStatusEnum.Completed)
                {
                    return new { @class = "bg-completed" };
                }
                else
                {
                    return new { };
                }
            })
            .Empty("Não existem dados")
            .Filterable()
            .Sortable()
            .Pageable(pager =>
            {
                pager.PageSizes = new Dictionary<Int32, String> { { 0, "All" }, { 5, "5" }, { 10, "10" }, { 20, "20" } };
                pager.ShowPageSizes = true;
                pager.PagesToDisplay = 6;
                pager.RowsPerPage = 5;
            })
)
<br /><br />

<div class="row center-block" align="center" style="@*border:0.5px solid #eaeaea;*@background-color:#fafafa;border-radius: 10px; padding:10px 0 10px 0">
    <div class="row text-center">
        <font size="+1.5">Legenda</font>
    </div>
    <br />
    <div class="col col-md-2 col-md-offset-1"><p class="bg-success text-center" style="border:solid 1px lightgrey;height:45px">Carregamento concluido com sucesso</p></div>
    <div class="col col-md-2"><p class="bg-info text-center" style="border:solid 1px lightgrey;height:45px">cliente a utilizar posto</p> </div>
    <div class="col col-md-2"><p class="color_td2 text-center" style="border:solid 1px lightgrey;height:45px">cliente atrasado para marcação</p></div>
    <div class="col col-md-2"><p class="bg-danger text-center" style="border:solid 1px lightgrey;height:45px">cliente faltou à marcação</p> </div>
    <div class="col col-md-2"><p class="color_td1 text-center" style="border:solid 1px lightgrey;height:45px">cliente excedeu o tempo de marcação</p></div>
</div>
<br />

<style>
    .mvc-grid th,
    .mvc-grid td {
        border-color: grey !important;
    }
    .color_td1{
        background-color:darksalmon;
    }
    .color_td2 {
        background-color: papayawhip;
    }
</style>

<style>
    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

    input:checked + .slider {
        background-color: #772953;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 34px;
    }

        .slider.round:before {
            border-radius: 50%;
        }
</style>

@section Scripts {
    <script>
        function reloadgrid() {
            var grid = new MvcGrid(document.querySelector('.mvc-grid'));
            if (document.getElementById('slider').checked)
            {
                grid.query.set('viewAll', true);
                localStorage.setItem('status', 1);
            }
            else
            {
                grid.query.set('viewAll', false);
                localStorage.setItem('status', 0);
            }

            grid.reload();
        }

        $(document).ready(function () {
            var val = localStorage.getItem('status');
            if (val == 1)
                $('#slider').prop('checked', true);
            else
                $('#slider').prop('checked', false);


            $('#slider').change(function () {
                reloadgrid();
            });
        });

        $(function () {
            setInterval(reloadgrid, 60 * 1000);
        });
    </script>
}