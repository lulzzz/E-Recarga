@model IQueryable<E_Recarga.Models.ERecargaModels.Appointment>
@using E_Recarga.Models

@{
    ViewBag.Title = "Index";
}

<center>
    <br />
    <h3>Marcações</h3>
    <br />
</center>

<p>
    @Html.ActionLink("Create New", "Create")
</p>


@(Html
            .Grid(Model)
            .Build(columns =>
            {
                columns.Add(model => model.Company.Name.Trim()).Titled("Empresa");
                columns.Add(model => model.Station.ComercialName.Trim()).Titled("Estação");
                columns.Add(model => model.Pod.Identifier.ToString()).Titled("Posto");
                columns.Add(model => model.User.Name.Trim()).Titled("Utilizador");
                columns.Add(model => model.Cost.ToString()).Titled("Custo");
                columns.Add(model => model.Start).Titled("Início");
                columns.Add(model => model.End).Titled("Fim");
                columns.Add(model => Enum_Dictionnary.Translator[model.Status.Name]).Titled("Estado");

                if (User.IsInRole(nameof(RoleEnum.CompanyManager)))
                    columns.Add(model => @Html.ActionLink("Detalhes", "Details", new { id = model.Id })).Titled("Ação");

                else if (User.IsInRole(nameof(RoleEnum.Employee)))
                    columns.Add(model => @Html.Raw(Html.ActionLink("Detalhes", "Details", new { id = model.Id }).ToString() + " | " + Html.ActionLink("Editar", "Edit", new { id = model.Id }).ToString())).Titled("Ações").Encoded(false);
            })
            .RowAttributed(model =>
            {
                if (model.AppointmentStatusId == AppointmentStatusEnum.Pending)
                {
                    if (DateTime.Now > model.Start && DateTime.Now < model.End)
                    {
                        return new { @class = "bg-warning" };
                    }
                    else if (DateTime.Now > model.End)
                    {
                        return new { @class = "bg-danger" };
                    }

                    return new { };
                }
                else if (model.AppointmentStatusId == AppointmentStatusEnum.Ongoing)
                {
                    if (DateTime.Now.AddMinutes(5) > model.End)
                    {
                        return new { @class = "bg-primary" };
                    }

                    return new { @class = "bg-info" };
                }
                else if (model.AppointmentStatusId == AppointmentStatusEnum.Cancelled)
                {
                    return new { @class = "bg-danger" };
                }
                else if (model.AppointmentStatusId == AppointmentStatusEnum.Completed)
                {
                    return new { @class = "bg-completed" };
                }
                else
                {
                    return new { };
                }
            })
            .Empty("Não existem dados")
            .Filterable()
            .Sortable()
            .Pageable(pager =>
            {
                pager.PageSizes = new Dictionary<Int32, String> { { 0, "All" }, { 5, "5" }, { 10, "10" }, { 20, "20" } };
                pager.ShowPageSizes = true;
                pager.PagesToDisplay = 3;
                pager.RowsPerPage = 5;
            })
)
<br /><br />

<div class="row center-block" align="center" style="border:0.5px solid #eaeaea;background-color:#fafafa;border-radius: 10px; padding:10px 0 10px 0">
    <div class="row text-center">
        <font size="+1.5" weight="bolder">Legenda</font>
    </div>
    <br />
    <div class="col col-md-2 col-md-offset-1"><p class="bg-success text-center" style="border:solid 1px lightgrey;height:45px">Carregamento concluido com sucesso</p></div>
    <div class="col col-md-2"><p class="bg-info text-center" style="border:solid 1px lightgrey;height:45px">cliente a utilizar posto</p> </div>
    <div class="col col-md-2"><p class="bg-warning text-center" style="border:solid 1px lightgrey;height:45px">cliente atrasado para marcação</p></div>
    <div class="col col-md-2"><p class="bg-danger text-center" style="border:solid 1px lightgrey;height:45px">cliente faltou à marcação</p> </div>
    <div class="col col-md-2"><p class="bg-primary text-center" style="border:solid 1px lightgrey;height:45px">cliente excedeu o tempo de marcação</p></div>
</div>
<br />

<style>
    .mvc-grid th,
    .mvc-grid td {
        border-color: grey !important;
    }
</style>

@section Scripts {
    <script>
        function reloadgrid() {
            var grid = new MvcGrid(document.querySelector('.mvc-grid'));
            grid.reload();
        }

        $(function () {
            setInterval(reloadgrid, 60 * 1000);
        });
    </script>
}